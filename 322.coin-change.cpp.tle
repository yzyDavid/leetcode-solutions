/*
 * [322] Coin Change
 *
 * https://leetcode.com/problems/coin-change/description/
 *
 * algorithms
 * Medium (26.61%)
 * Total Accepted:    86.3K
 * Total Submissions: 324.2K
 * Testcase Example:  '[1]\n0'
 *
 * 
 * You are given coins of different denominations and a total amount of money
 * amount. Write a function to compute the fewest number of coins that you need
 * to make up that amount. If that amount of money cannot be made up by any
 * combination of the coins, return -1.
 * 
 * 
 * 
 * Example 1:
 * coins = [1, 2, 5], amount = 11
 * return 3 (11 = 5 + 5 + 1)
 * 
 * 
 * 
 * Example 2:
 * coins = [2], amount = 3
 * return -1.
 * 
 * 
 * 
 * Note:
 * You may assume that you have an infinite number of each kind of coin.
 * 
 * 
 * Credits:Special thanks to @jianchao.li.fighter for adding this problem and
 * creating all test cases.
 */

#include <vector>
#include <limits>

using std::vector;

class Solution {
public:
    static vector<int> *pcoins;
    static size_t len;
    static int ans;

    int coinChange(vector<int>& coins, int amount) {
        ans = std::numeric_limits<int>::max();
        pcoins = &coins;
        len = coins.size();
        next(0, amount, 0);
        if (ans == std::numeric_limits<int>::max())
        {
            return -1;
        }
        return ans;
    }

    static void next(int times, int amount, int mi)
    {
        if (amount == 0)
        {
            ans = ans <= times ? ans : times;
            return;
        }
        int i = mi;
        for (; i < len; ++i)
        {
            int c = pcoins->operator[](i);
            if (amount - c >= 0)
            {
                next(times + 1, amount - c, i);
            }
        }
    }
};

vector<int> *Solution::pcoins;
size_t Solution::len;
int Solution::ans;
