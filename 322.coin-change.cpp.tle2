/*
 * [322] Coin Change
 *
 * https://leetcode.com/problems/coin-change/description/
 *
 * algorithms
 * Medium (26.61%)
 * Total Accepted:    86.3K
 * Total Submissions: 324.2K
 * Testcase Example:  '[1]\n0'
 *
 * 
 * You are given coins of different denominations and a total amount of money
 * amount. Write a function to compute the fewest number of coins that you need
 * to make up that amount. If that amount of money cannot be made up by any
 * combination of the coins, return -1.
 * 
 * 
 * 
 * Example 1:
 * coins = [1, 2, 5], amount = 11
 * return 3 (11 = 5 + 5 + 1)
 * 
 * 
 * 
 * Example 2:
 * coins = [2], amount = 3
 * return -1.
 * 
 * 
 * 
 * Note:
 * You may assume that you have an infinite number of each kind of coin.
 * 
 * 
 * Credits:Special thanks to @jianchao.li.fighter for adding this problem and
 * creating all test cases.
 */

#include <vector>
#include <limits>

using std::vector;
constexpr int int_max = std::numeric_limits<int>::max();

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if (amount == 0) return 0;
        vector<int> memo(amount + 1, 0);
        for (auto v : coins)
        {
            if (v > amount) continue;
            memo[v] = 1;
        }
        for (int i = 1; i <= amount; ++i)
        {
            if (memo[i] != 0)
            {
                continue;
            }
            auto min = int_max;
            for (int j = 1; j < i; ++j)
            {
                if (memo[i - j] == 0 || memo[j] == 0) continue;
                auto r = memo[i - j] + memo[j];
                min = r < min ? r : min;
            }
            if (min != int_max)
                memo[i] = min;
        }
        if (memo[amount] == int_max) return -1;
        if (memo[amount] == 0) return -1;
        return memo[amount];
    }
};
